# Table definition
namespace: sidekick_private
type: DBConfig
table_name: users_password
depends_on:
  - sidekick.users
create_stmt: >
  CREATE TABLE IF NOT EXISTS users_password (
    id Integer PRIMARY KEY REFERENCES sidekick.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    password_hash CHAR(60) NOT NULL,
    password_recovery_code UUID,
    password_recovery_code_updated_at TIMESTAMP
    );
trigger_stmt:
  - DROP TRIGGER IF EXISTS update_users_password_updated_at ON users_password;
    CREATE TRIGGER update_users_password_updated_at BEFORE UPDATE ON users_password
    FOR EACH ROW EXECUTE PROCEDURE updated_at_trigger();
description:
  table: >
    Extends the base user table by the concept of passwords. Each password is stored as a hash and can have a recovery code.
    It is possible to have multiple passwords per user.
  columns:
    id: Auto incremental integer
    created_at: Timestamp when the user was created
    updated_at: Timestamp when the last modification has happend
    password_hash: Hash value 60 character in length
    password_recovery_code: An uuid which will should always be null unless a recovery has been issued
    password_recovery_code_updated_at: Timestamp when the recovery uuid was last updated
create_functions:
  - CREATE OR REPLACE FUNCTION sidekick.register_user_by_password(
      blocked boolean,
      password text
    ) returns sidekick.users as $$
    declare
      new_user sidekick.users;
    begin
      insert into sidekick.users (blocked) values
        (blocked)
        returning * into new_user;

      insert into sidekick_private.users_password (id, password_hash) values
        (new_user.id, crypt(password, gen_salt('bf')));

      return new_user;
    end;
    $$ language plpgsql strict security definer;
    COMMENT ON FUNCTION sidekick.register_user_by_password(boolean, text) IS 'Registers a single user by password and returns a sidekick.users. First argument is a boolean telling if the user should be marked as blocked. The Secound argurmen it the password in plain text. The password will be hashed using the pg function crypt(password, gen_salt("bf"))';
    GRANT EXECUTE ON FUNCTION sidekick.register_user_by_password TO sidekick_public;
